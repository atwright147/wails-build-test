name: Wails build

on: [push, pull_request]

jobs:
  # First build all platform-specific binaries
  build:
    strategy:
      fail-fast: false
      matrix:
        build: [
          {name: build-test, platform: linux/amd64, os: ubuntu-latest},
          {name: build-test, platform: windows/amd64, os: windows-latest},
          {name: build-test, platform: darwin/amd64, os: macos-latest},
          {name: build-test, platform: darwin/arm64, os: macos-latest}
        ]
    runs-on: ${{ matrix.build.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: dAppServer/wails-build-action@main
        with:
          build-name: ${{ matrix.build.name }}
          build-platform: ${{ matrix.build.platform }}
          build-obfuscate: true

      # Upload platform-specific artifacts (except macOS which will be handled later)
      - name: Upload non-macOS artifacts
        if: matrix.build.platform != 'darwin/amd64' && matrix.build.platform != 'darwin/arm64'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build.name }}-${{ matrix.build.platform }}
          path: build/bin/${{ matrix.build.name }}*

      # For macOS builds, upload the app as an intermediate artifact
      - name: Upload macOS intermediate artifacts
        if: matrix.build.platform == 'darwin/amd64' || matrix.build.platform == 'darwin/arm64'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build.name }}-${{ matrix.build.platform }}-intermediate
          path: build/bin/${{ matrix.build.name }}.app

  # Create universal macOS binary
  universal-macos:
    needs: build
    runs-on: macos-latest
    steps:
      - name: Download Intel macOS build
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-darwin-amd64-intermediate
          path: build/bin/intel

      - name: Download Apple Silicon macOS build
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-darwin-arm64-intermediate
          path: build/bin/arm

      - name: Create universal binary
        run: |
          mkdir -p build/bin/universal/build-test.app/Contents/MacOS

          # Copy app structure from either build (they should be identical except for the binary)
          cp -R build/bin/intel/build-test.app/Contents/Resources build/bin/universal/build-test.app/Contents/
          cp -R build/bin/intel/build-test.app/Contents/Info.plist build/bin/universal/build-test.app/Contents/

          # Create universal binary using lipo
          lipo -create \
            build/bin/intel/build-test.app/Contents/MacOS/build-test \
            build/bin/arm/build-test.app/Contents/MacOS/build-test \
            -output build/bin/universal/build-test.app/Contents/MacOS/build-test

          # Set executable permissions
          chmod +x build/bin/universal/build-test.app/Contents/MacOS/build-test

          # Package the universal app
          ditto -c -k --keepParent build/bin/universal/build-test.app build/bin/build-test-universal-macos.zip

      - name: Upload universal macOS app
        uses: actions/upload-artifact@v4
        with:
          name: build-test-universal-macos
          path: build/bin/build-test-universal-macos.zip
