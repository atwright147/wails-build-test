name: Wails build

on: [push, pull_request]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        build: [
          {name: build-test, platform: linux/amd64, os: ubuntu-latest},
          {name: build-test, platform: windows/amd64, os: windows-latest},
          {name: build-test, platform: darwin/amd64, os: macos-latest},
          {name: build-test, platform: darwin/arm64, os: macos-latest}
        ]
    runs-on: ${{ matrix.build.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: dAppServer/wails-build-action@main
        with:
          build-name: ${{ matrix.build.name }}
          build-platform: ${{ matrix.build.platform }}
          build-obfuscate: true
      - name: Package macOS application
        if: matrix.build.platform == 'darwin/amd64' || matrix.build.platform == 'darwin/arm64'
        run: |
          ls -la build/bin/
          chmod +x build/bin/.app/Contents/MacOS/
          ditto -c -k --keepParent "build/bin/build-test.app" "build/bin/${{ matrix.build.name }}-${{ matrix.build.platform }}.zip"
      - name: Set artifact name
        run: |
          ARTIFACT_NAME="${{ matrix.build.name }}-${{ matrix.build.platform }}"
          ARTIFACT_NAME="${ARTIFACT_NAME//\//-}"
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: build/bin/${{ matrix.build.name }}*

  create-universal-binary:
    needs: build
    runs-on: macos-latest
    steps:
      - name: Download amd64 artifact
        uses: actions/download-artifact@v4
        with:
          name: build-test-darwin-amd64
          path: amd64-build

      - name: Download arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: build-test-darwin-arm64
          path: arm64-build

      - name: Create universal binary
        run: |
          # First extract both zip files
          unzip "amd64-build/build-test-darwin-amd64.zip" -d amd64-app
          unzip "arm64-build/build-test-darwin-arm64.zip" -d arm64-app

          # Create directory structure for universal binary
          mkdir -p universal-app/build-test.app/Contents/MacOS

          # Use lipo to combine the binaries
          lipo -create \
            "amd64-app/build-test.app/Contents/MacOS/build-test" \
            "arm64-app/build-test.app/Contents/MacOS/build-test" \
            -output "universal-app/build-test.app/Contents/MacOS/build-test"

          # Copy all other necessary files (Info.plist, resources, etc.)
          cp -R amd64-app/build-test.app/Contents/Resources universal-app/build-test.app/Contents/
          cp amd64-app/build-test.app/Contents/Info.plist universal-app/build-test.app/Contents/

          # Make the binary executable
          chmod +x universal-app/build-test.app/Contents/MacOS/build-test

          # Create zip of universal app
          ditto -c -k --keepParent "universal-app/build-test.app" "build-test-darwin-universal.zip"

      - name: Upload universal binary
        uses: actions/upload-artifact@v4
        with:
          name: build-test-darwin-universal
          path: build-test-darwin-universal.zip
